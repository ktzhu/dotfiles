call pathogen#infect()
let mapleader=","
syntax enable
set nocompatible

set softtabstop=2
set shiftwidth=2
set expandtab
set ai
set number
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.bak,*.pyc,*.class
" nnoremap ; :
filetype on
filetype plugin on
filetype  plugin indent on
set hlsearch
set incsearch
set ignorecase
set smartcase
set vb
set guicursor=n-v-c:block-Cursor-blinkon0,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor,r-cr:hor20-Cursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175
highlight Cursor guifg=cyan guibg=cyan

" ctrlp ignore .git and compiled files
let g:ctrlp_custom_ignore = 'out/intermediates\|out/final|git'

fun! <SID>ObliterateTrailingWhitespace()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python,less,html,jade,javascript autocmd BufWritePre <buffer> :call <SID>ObliterateTrailingWhitespace()

" Ignore whitespace in diffs
set diffopt+=iwhite

" Clear highlighted searches with ease
nmap <silent> ,/ :nohlsearch<CR>

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Select all
nmap <C-a> ggVG"*yG<CR>

" Set RVM Ruby path
let g:ruby_path = system('rvm current')

" NERDTreeToggle with ,n
nnoremap <leader>n :NERDTreeToggle<CR>
" NERDTreeFind with ,m
nnoremap <leader>m :NERDTreeFind<CR>

" GundoToggle with ,x
nnoremap <leader>x :GundoToggle<CR>

" disable arrow keys
" map <up> <nop>
" map <down> <nop>
" map <left> <nop>
" map <right> <nop>
" imap <up> <nop>
" imap <down> <nop>
" imap <left> <nop>
" imap <right> <nop>

" Drag lines with ease
nmap <C-k> [e
nmap <C-j> ]e
vmap <C-k> [egv
vmap <C-j> ]egv

" Indent lines with ease
vnoremap < <gv
vnoremap > >gv
map = <c-w>><c-w>><c-w>><c-w>><c-w>>
map - <c-w><<c-w><<c-w><<c-w><<c-w><

au BufNewFile,BufRead *.jst set syntax=jst
au BufNewFile,BufRead *.soy set syntax=soy
au BufNewFile,BufRead *.proto set syntax=proto
au BufNewFile,BufRead *.go set syntax=go

if exists("g:insert_mode_background_color")
  augroup HighlightOnInsert
    autocmd!
    autocmd InsertEnter * execute "highlight Normal guibg=" . g:insert_mode_background_color
    autocmd InsertLeave * execute "colorscheme " . g:colors_name
  augroup END
endif

" Vim UI {
  set background=light
  let &t_Co=256
  let g:solarized_termtrans = 1
  colorscheme pencil
  highlight ColorColumn ctermbg=7
  if has('statusline')
    set laststatus=2
      set statusline=%<%f\    " Filename
      set statusline+=%w%h%m%r " Options
      set statusline+=%{fugitive#statusline()} "  Git Hotness
      "set statusline+=\ [%{&ff}/%Y]            " filetype
      set statusline+=\ [%{getcwd()}]          " current dir
      "set statusline+=\ [A=\%03.3b/H=\%02.2B] " ASCII / Hexadecimal value of char
      set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav info
    endif
  set backspace=start,eol,indent
  set showmode
  set wildmenu
  set listchars=tab:>.,trail:.,extends:#,nbsp:.
  highlight ExtraWhitespace ctermbg=red guibg=red
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()
" }

" lightline
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }

" ctrl-p {
  let g:ctrlp_custom_ignore = 'out\|node_modules\|DS_Store\|/^git$/'
" }

set mouse=a
