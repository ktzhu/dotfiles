# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="af-magic"
TERM='xterm-256color'
bindkey -e

# set -o vi
# # Fix backspaces to act more like bash's vi
# bindkey "^?" backward-delete-char
# bindkey "^W" backward-kill-word
# bindkey "^H" backward-delete-char
# bindkey "^U" kill-line
# export EDITOR='vi'
export TIMBER_HOME=/Users/kt/workspace/medium/timber
export MEDIUM2_HOME=/Users/kt/workspace/medium/medium2
export MONO_HOME=/Users/kt/workspace/medium/mono

setopt nobeep

# Turn off that damn autocorrect
unsetopt correct_all

# History stuff
# Remember about a years worth of history (AWESOME)
SAVEHIST=10000
HISTSIZE=10000

# Don't overwrite, append!
setopt APPEND_HISTORY

# Write after each command
# setopt INC_APPEND_HISTORY

# Share history between multiple shells
setopt SHARE_HISTORY

# If I type cd and then cd again, only save the last one
setopt HIST_IGNORE_DUPS

# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias postgresup='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias postgresdown='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable bi-weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment to change how many often would you like to wait before auto-updates occur? (in days)
# export UPDATE_ZSH_DAYS=13

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"


# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git vi-mode ruby rails)

# Load RVM function
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"

# teamocil autocompletion
compctl -g '~/.teamocil/*(:t:r)' teamocil

# Source dat bidness
source $ZSH/oh-my-zsh.sh

# nvm
[ -s $HOME/.nvm/nvm.sh ] && . $HOME/.nvm/nvm.sh
[[ -r $NVM_DIR/bash_completion ]] && . $NVM_DIR/bash_completion

# source /usr/local/bin/virtualenvwrapper.sh
# source ~/.git-completion.zsh - comment for now bc it parse errors out when tab completing files
# source ~/.env

export PATH=/usr/local/share/npm/bin:~/code/obvious/internal/scripts:/usr/local/bin:$PATH:$HOME/bin:$PYTHONPATH

bindkey '^R' history-incremental-search-backward
alias tmuxnew="tmux -S /usr/local/var/pairprogramming new"
alias tmuxopen="chmod 777 /usr/local/var/pairprogramming"
alias tmuxat="tmux -S /usr/local/var/pairprogramming at"
alias dev="cd ~/Dev"
alias flushdns="dscacheutil -flushcache"
alias showdeskicons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
alias hidedeskicons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdotfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hidedotfiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Reset previous commit but keep all changes
alias goddammit="git reset --soft HEAD^"
# fuck it all
alias fuckit="git reset --hard HEAD"

# empty trash and delete Apple's syslogs
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"
export JAVA_HOME="$(/usr/libexec/java_home)"
export EC2_HOME="/usr/local/Library/LinkedKegs/ec2-api-tools/jars"
export GOPATH=$HOME/code/golang:$HOME/code/obvious/go-forks

# medium keys
# export AWS_ACCESS_KEY_ID="AKIAJ2L3T6JXLK4QRJTQ"
# export AWS_SECRET_ACCESS_KEY="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"

# . `brew --prefix`/etc/profile.d/z.sh

# katie+opennews keys
export AWS_ACCESS_KEY_ID="AKIAIJEXWNXQF4XAQ3HA"
export AWS_SECRET_ACCESS_KEY="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"
export OWHACK_GOOGLE_EMAIL='owhack.maps@gmail.com'
export OWHACK_GOOGLE_PASS='d!spUted'

# Note: ~/.ssh/environment should not be used, as it
#       already has a different purpose in SSH.

env=~/.ssh/agent.env

# Note: Don't bother checking SSH_AGENT_PID. It's not used
#       by SSH itself, and it might even be incorrect
#       (for example, when using agent-forwarding over SSH).

agent_is_running() {
    if [ "$SSH_AUTH_SOCK" ]; then
        # ssh-add returns:
        #   0 = agent running, has keys
        #   1 = agent running, no keys
        #   2 = agent not running
        ssh-add -l >/dev/null 2>&1 || [ $? -eq 1 ]
    else
        false
    fi
}

agent_has_keys() {
    ssh-add -l >/dev/null 2>&1
}

agent_load_env() {
    . "$env" >/dev/null
}

agent_start() {
    (umask 077; ssh-agent >"$env")
    . "$env" >/dev/null
}

if ! agent_is_running; then
    agent_load_env
fi

# if your keys are not stored in ~/.ssh/id_rsa.pub or ~/.ssh/id_dsa.pub, you'll need
# to paste the proper path after ssh-add
if ! agent_is_running; then
    agent_start
    ssh-add
elif ! agent_has_keys; then
    ssh-add
fi

unset env

# Load the Medium environment
[ -f /opt/medium/env ] && source /opt/medium/env
